trigger: none

resources:
  repositories:
    - repository: self
      type: github
      name: Action1Corp/PSAction1
      endpoint: 'Action1 GitHub'
      branch: 'main'

pool:
  vmImage: 'windows-latest'

jobs:
- job: SignScripts
  displayName: 'Sign scripts'
  steps:

    - checkout: self
      clean: true
      fetchDepth: 0
      persistCredentials: true

    - task: AWSShellScript@1
      displayName: 'Get codesign cert'
      inputs:
        awsCredentials: 'Action1 AWS'
        regionName: 'us-east-1'
        scriptType: 'inline'
        inlineScript: |
          SECRET=$(aws secretsmanager get-secret-value --secret-id a1-builder/codesigncert --query SecretString --output text)
          BASE64_PFX=$(echo "$SECRET" | jq -r ".codesigncert")
          echo "$BASE64_PFX" | base64 --decode > "$(Build.SourcesDirectory)/cert.pfx"

    - task: PowerShell@2
      displayName: 'Display sources directory files'
      inputs:
        targetType: inline
        script: |
          Get-ChildItem -Path $Directory -Recurse -Include *.ps1, *.psm1, *.psd1 -File |
          ForEach-Object {
              Write-Host "Signing: $($_.FullName)"
              try {
                  #$signResult = Set-AuthenticodeSignature -FilePath $_.FullName -Certificate $certificate -ErrorAction Stop
                  #if ($signResult.Status -eq 'Valid') {
                  #    Write-Host "Successfully signed: $($_.FullName)"
                  #} else {
                  #    Write-Host "Signed but encountered status '$($signResult.Status)': $($_.FullName)"
                  #}
              }
              catch {
                  Write-Warning "Failed to sign '$($_.FullName)': $($_.Exception.Message)"
              }
          }