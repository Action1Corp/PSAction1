trigger: none

resources:
  repositories:
    - repository: self
      type: github
      name: Action1Corp/PSAction1
      endpoint: 'Action1 GitHub'
      branch: 'main'

pool:
  vmImage: 'windows-latest'

jobs:
- job: SignScripts
  displayName: 'Sign scripts'
  steps:

    - checkout: self
      clean: true
      fetchDepth: 0
      persistCredentials: true

    - task: AWSShellScript@1
      displayName: 'Get codesign cert'
      inputs:
        awsCredentials: 'Action1 AWS'
        regionName: 'us-east-1'
        scriptType: 'inline'
        inlineScript: |
          SECRET=$(aws secretsmanager get-secret-value --secret-id a1-devops/a1-builder/codesigncert --query SecretString --output text)
          BASE64_PFX=$(echo "$SECRET" | jq -r ".codesigncert")
          PFX_PASS=$(echo "$SECRET" | jq -r ".codesigncertpass")
          echo "$BASE64_PFX" | base64 --decode > "$(Build.SourcesDirectory)/cert.pfx"
          echo "##vso[task.setvariable variable=PFX_PASS;issecret=true]$PFX_PASS"

    - task: PowerShell@2
      displayName: 'Sign PowerShell files'
      inputs:
        targetType: inline
        script: |
          Write-Host "Loading certificate from PFX: $PfxPath"
          Write-Host $env:PFX_PASS
          try {
              $keyStorageFlags = [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::PersistKeySet `
                   -bor [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::Exportable
              $certificate = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2(
                "$(Build.SourcesDirectory)/cert.pfx",
                "Lock12Lock",
                $keyStorageFlags
              )
          }
          catch {
              Write-Host "##vso[task.logissue type=error;]Failed to load PFX certificate: $($_.Exception.Message)"
              Write-Host "##vso[task.complete result=Failed;]Failed to load PFX certificate: $($_.Exception.Message)"
              exit 1
          }
          Get-ChildItem -Path $Directory -Recurse -Include *.ps1, *.psm1, *.psd1 -File |
          ForEach-Object {
              Write-Host "Signing: $($_.FullName)"
              try {
                  $signResult = Set-AuthenticodeSignature -FilePath $_.FullName -Certificate $certificate -ErrorAction Stop
                  #if ($signResult.Status -eq 'Valid') {
                      Write-Host "Successfully signed: $($_.FullName)"
                      Copy-Item $_.FullName -Destination $env:Build_ArtifactStagingDirectory
                  #} else {
                  #    Write-Host "##vso[task.logissue type=error;]Signed but encountered status '$($signResult.Status)': $($_.FullName)"
                      #Write-Host "##vso[task.complete result=Failed;]Signed but encountered status '$($signResult.Status)': $($_.FullName)"
                      #exit 1
                  #}
              }
              catch {
                  Write-Host "##vso[task.logissue type=error;]Failed to sign '$($_.FullName)': $($_.Exception.Message)"
                  Write-Host "##vso[task.complete result=Failed;]Failed to load PFX certificate: $($_.Exception.Message)"
                  exit 1
              }
          }
      env:
        PFX_PASS: $(PFX_PASS)

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Internally'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'release'
        publishLocation: 'Container'
        